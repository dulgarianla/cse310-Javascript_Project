{"mappings":"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","sources":["index.ts"],"sourcesContent":["const board = document.querySelector('.game-board') as HTMLElement;\r\nconst button = document.querySelector('.button') as HTMLElement;\r\nconst winMessage = document.querySelector('.winner') as HTMLElement;\r\n\r\n// Define a type for the current player ('X', 'O', or '')\r\ntype Turn = \"X\" | \"O\" | \"\";\r\n\r\nlet turn: Turn = \"X\";\r\n\r\n// Add a click event listener to the game board\r\nfunction listenBoard(): void {\r\n    board.addEventListener('click', runGame);\r\n}\r\n\r\n// Main function to initialize the game\r\nfunction main(): void {\r\n    createBoard();\r\n    listenBoard();\r\n}\r\n\r\n// Function to handle the game logic when a cell is clicked\r\nfunction runGame(e: Event): void {\r\n    const boxId: string | null = (<HTMLElement>e.target).id;\r\n    console.log(boxId);\r\n    if (boxId === null) return;\r\n    const box: HTMLElement | null = document.querySelector(`#${boxId}`);\r\n    if (box === null || box.textContent !== \"\") return;\r\n    box.textContent = turn;\r\n    const winner: boolean = checkWinner();\r\n    if (!winner) \r\n    {\r\n        switchPlayer();\r\n    } \r\n    else \r\n    {\r\n        endGame();\r\n    }\r\n}\r\n\r\n// Function to end the game\r\nfunction endGame(): void {\r\n    // Remove the click event listener to prevent further moves\r\n    board.removeEventListener(\"click\", runGame);\r\n    // Re-add the click event listener for a new game\r\n    button.addEventListener(\"click\", resetGame);\r\n    if (winMessage == null) return;\r\n    winMessage.textContent = `Winner is ${turn}`;\r\n    winMessage.style.display = 'block'; // Use style.display to control visibility\r\n    button.style.visibility = 'visible';\r\n}\r\n\r\n// Function to reset the game\r\nfunction resetGame(): void {\r\n    turn = \"X\";\r\n    resetBoxes();\r\n    button.style.visibility = 'hidden';\r\n    winMessage.textContent = \"\";\r\n    board.addEventListener('click', runGame);\r\n}\r\n\r\n// Function to reset all game boxes to an empty state\r\nfunction resetBoxes(): void {\r\n    for (let i = 0; i <= 8; i++) {\r\n        const box = document.querySelector(`#box-${i}`) as HTMLElement;\r\n        box.textContent = \"\";\r\n        const boxClass: string = box.className;\r\n        box.classList.remove(boxClass);\r\n        void box.offsetWidth;\r\n        box.classList.add(\"box\");\r\n    }\r\n}\r\n\r\n// Function to check if a player has won\r\nfunction checkWinner(): boolean {\r\n    const boxes: Array<string> = getBoxes();\r\n    const winningCombinations: number[][] = \r\n    [\r\n        [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows\r\n        [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns\r\n        [0, 4, 8], [2, 4, 6]            // Diagonals\r\n    ];\r\n\r\n    for (const combination of winningCombinations) \r\n    {\r\n        const [a, b, c] = combination;\r\n        if (boxes[a] !== \"\" && boxes[a] === boxes[b] && boxes[b] === boxes[c]) \r\n        {\r\n            return true; // Found a winning combination\r\n        }\r\n    }\r\n    return false; // No winning combinations found\r\n}\r\n\r\n// Function to get the content of all game boxes\r\nfunction getBoxes(): Array<string> {\r\n    const boxesContent: Array<string> = [];\r\n    for (let i = 0; i < 9; i++) \r\n    {\r\n        const box = document.querySelector(`#box-${i}`) as HTMLElement;\r\n        const boxContent: string | null = box.textContent;\r\n        if (boxContent === null) boxesContent.push(\"\");\r\n        else \r\n        {\r\n            boxesContent.push(boxContent);\r\n        }\r\n    }\r\n    return boxesContent;\r\n}\r\n\r\n// Function to switch the current player\r\nfunction switchPlayer(): void {\r\n    if (turn == \"X\") {\r\n        turn = \"O\";\r\n    } else {\r\n        turn = \"X\";\r\n    }\r\n}\r\n\r\n// Function to create the game board with 9 cells\r\nfunction createBoard(): void {\r\n    for (let i = 0; i < 9; i++) \r\n    {\r\n        makeBox(i);\r\n    }\r\n}\r\n\r\n// Function to create a single cell in the game board\r\nfunction makeBox(i: number): void {\r\n    const box: HTMLDivElement = document.createElement(\"div\");\r\n    box.className = \"box\";\r\n    box.id = `box-${i}`;\r\n    box.textContent = \"\";\r\n    board.append(box);\r\n}\r\n\r\n// Start the game by calling the main function\r\nmain();\r\n\r\n"],"names":[],"version":3,"file":"index.242b51c6.js.map","sourceRoot":"/__parcel_source_root/"}